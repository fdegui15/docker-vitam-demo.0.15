
filter
{

    # --------------------------------------------------
    # Basic text transforms
    # --------------------------------------------------

    mutate {
        # logback send 011 code for \t and 012 for \n
        gsub => [ "message", "#011", "\t" ]
        gsub => [ "message", "#012", "\n" ]
        gsub => [ "message", "\t", ' ' ]
        gsub => [ "message", "\n", '    ' ]
    }

    # --------------------------------------------------
    # Special transforms for syslog inputs
    # --------------------------------------------------

    # Todo move this at the end (to find vitam-* for real vitam components)
    if [input] == "syslog" {
        grok {
            break_on_match => false
            keep_empty_captures => true
            # If program name starts with 'vitam-', keep only the suffix
            match => [ "program", "(?:(vitam[-._])?)(?<program>[^.]*)" ]
            overwrite => [ "program" ]
        }
    }

    # --------------------------------------------------
    # Special transforms for curator input (log file)
    # --------------------------------------------------

    if [input] == "curator" {
        grok {
            break_on_match => false
            keep_empty_captures => true
            # Fix set program to "curator"
            match => [ "path", "(?:%{UNIXPATH:path_file})/(?<program>[^.]*)"]
        }
    }

    # --------------------------------------------------
    # Let's parse the message depending on the program sending it
    # --------------------------------------------------

    if [program] =~ "mongo" {
        grok {
            break_on_match => false
            keep_empty_captures => true
            match => [ "message", "(?:%{GREEDYDATA:msg_info})" ]
            # "timestamp" => "Aug 19 20:09:00",
            match => [ "timestamp", "(%{MONTH:mois}%{SPACE}%{MONTHDAY:jour}%{SPACE}%{HOUR:hr}:%{MINUTE:mn}:%{SECOND:sec})" ]
        }
        # Here, we apparently need to do that in 2 steps, instead the correct date is not set in the timestamp variable.
        mutate { add_field => [ "date_msg", "%{+YYYY}-%{+MM}-%{jour} %{hr}:%{mn}:%{sec}" ] }
        mutate { replace => { timestamp => "%{date_msg}" } }
        # TODO review : either don't use the local variable date_msg, or unset it here.
        mutate { add_field => [ "type", "mongo" ] }
        date {
            match => [ "timestamp" , "yyyy-MM-dd HH:mm:ss" ]
            target => [ "@timestamp" ]
        }
    }

    else if [program] =~ "elasticsearch-" {
        grok {
            match => [
                # Todo: rename err_level to log_level
                "message",
                "\[%{TIMESTAMP_ISO8601:timestamp}\]%{SPACE}\[%{LOGLEVEL:err_level}(%{SPACE})?\]%{SPACE}\[(?<module_name>[^ ]*)%{SPACE}\]%{SPACE}\[(?<node_name>[^\]]*)\]%{SPACE}%{GREEDYDATA:msg_info}%{SPACE}"
            ]
            overwrite => [ "timestamp" ]
        }
        mutate { add_field => [ "type", "elasticsearch" ] }
        date {
            match => [ "timestamp" , "yyyy-MM-dd HH:mm:ss,SSS" ]
            target => [ "@timestamp" ]
        }
    }

    else if [program] =~ "curator" {
        grok {
            match => [
                "message",
                "%{TIMESTAMP_ISO8601:timestamp}%{SPACE}%{LOGLEVEL:err_level}%{SPACE}(?<module_name>[^ ]*)%{SPACE}(?:%{GREEDYDATA:msg_info})"
            ]
            overwrite => [ "timestamp" ]
        }
        mutate { add_field => { "type" => "curator" } }
        date {
            match => [ "timestamp" , "yyyy-MM-dd HH:mm:ss,SSS" ]
            target => [ "@timestamp" ]
        }
    }

    else if [program] =~ "consul" {
        grok {
            break_on_match => false
            match => [
                "message",
                "%{CONSUL_TIMESTAMP:timestamp}?%{SPACE}(\[%{LOGLEVEL:err_level}\])?%{SPACE}(?<module_name>[^:]*)?:?%{SPACE}(?:%{GREEDYDATA:msg_info})"
            ]
            overwrite => [ "timestamp" ]
        }
        mutate { add_field => { "type" => "consul" } }
        date {
            match => [ "timestamp" , "yyyy/MM/dd HH:mm:ss", "MMM dd HH:mm:ss", "MMM  d HH:mm:ss" ]
            target => [ "@timestamp" ]
        }
    }
    else if [program] =~ "clamd" {
        grok {
            break_on_match => false
            match => [
                "message",
                "%{CONSUL_TIMESTAMP:timestamp}?%{SPACE}(\[%{LOGLEVEL:err_level}\])?%{SPACE}(?<module_name>[^:]*)?:?%{SPACE}(?:%{GREEDYDATA:msg_info})"
            ]
            overwrite => [ "timestamp" ]
        }
        mutate { add_field => { "type" => "clamd" } }
        date {
            match => [ "timestamp" , "yyyy/MM/dd HH:mm:ss", "MMM dd HH:mm:ss", "MMM  d HH:mm:ss" ]
            target => [ "@timestamp" ]
        }
    }

    # Now we should have only the vitam components
    # todo: change this by else if (vitam-*) and else {generic processing}
    # todo change module name to thread name (everywhere)
    else {
        grok {
            break_on_match => false
            keep_empty_captures => true
            match => [
                "message",
                "%{TIMESTAMP_ISO8601:timestamp}%{SPACE}\[\[(?<module_name>.*)\]\]%{SPACE}\[(?<request_id>.*)\]%{SPACE}%{LOGLEVEL:err_level}%{SPACE}(?:%{GREEDYDATA:msg_data})"
            ]
            match => [
                "msg_data",
                "(?<class_name>[^\b]*)%{SPACE}-%{SPACE}(?<module_acces>[^\b]*)%{SPACE} : (?:%{GREEDYDATA:msg_info})"
            ]
            overwrite => [ "timestamp" ]
        }
        mutate { add_field => { "type" => "logback" } }
        date {
            match => [ "timestamp" , "yyyy-MM-dd HH:mm:ss,SSS" ]
            target => [ "@timestamp" ]
        }
    }

    # --------------------------------------------------
    # If we don t have any grokparsefailure on the message, remove the unused fields
    # --------------------------------------------------

    # todo rescope some remove_fileds (ex: msg_data, space (should be removed), ...)
    if "_grokparsefailure" not in [tags] {
        mutate {
            remove_field => [
                "syslog_timestamp", "syslog_message",
                "syslog_program",
                "space", "date_msg", "mois", "jour", "hr", "mn", "sec",
                "severity", "facility", "facility_label", "severity_label", "priority",
                "request",
                "request_info",
                "path",
                "path_file",
                "path_log",
                "message",
                "msg_data",
                "input",
                "@version",
                "timestamp"
            ]
        }
    }

}
