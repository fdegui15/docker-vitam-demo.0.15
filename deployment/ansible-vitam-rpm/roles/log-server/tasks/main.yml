---
# tasks file for log-server

#### Kibana installation ####

- name: Install kibana package from repo
  package:
    name: kibana
    state: latest
  notify:
    - systemctl reload-daemon
    - restart kibana

- name: Add kibana autostart at boot
  service:
    name: kibana
    enabled: yes
  notify:
    - restart kibana

- name: Configure Kibana connection to elasticsearch
  replace:
    dest: /opt/kibana/config/kibana.yml
    regexp: '^# elasticsearch\.url:.*$'
    replace: "elasticsearch.url: \"http://{{elasticsearch_log_host}}:{{elasticsearch_log_http_port}}\""
  notify:
    - restart kibana

#### Logstash installation ####

- name: Install java (prerequisite for other components)
  yum:
    name: java-1.8.0
    state: latest
  when: ansible_distribution == "CentOS"

- name: install openjdk from jessie-backports only when Debian
  apt:
    name: openjdk-8-jre-headless
    state: latest
    default_release: jessie-backports
  when: ansible_distribution == "Debian"



- name: Install logstash package from repo
  package:
    name: logstash-all-plugins
    state: latest
  notify:
    - restart logstash

- name: Enable logstash
  service:
    name: logstash
    enabled: yes
  notify:
    - restart logstash

## Logstash configuration

- name: Ensure logstash directories exist
  file:
    path: "{{vitam_folder_root}}/{{item}}/logstash"
    owner: logstash
    state: directory
    mode: "{{vitam_folder_permission}}"
  with_items:
    - data
    - log
    - conf
    - lib
  notify:
    - restart logstash

- name: ensure json conf extra  directory exists
  file:
    path: "{{logstash_confextra_dir}}"
    owner: logstash
    state: directory
    mode: "{{vitam_folder_permission}}"
  notify:
    - restart logstash

# TODO: Check if useful, else remove.
- name: create conf subdir for logstash (useless)
  file:
    path: /opt/logstash/conf
    state: directory
    owner: logstash
    mode: 0755

- name: copy default logstash file (preferIPv4)
  template:
    src: logstash.j2
    dest: /etc/default/logstash
    owner: root
    mode: 0644
  notify:
    - restart logstash

# FIXME : find a more proper solution later for this on Debian
- name : ensure /etc/sysyconfig exists on Debian
  file:
    path: /etc/sysconfig
    state: directory
    owner: root
    group: root
    mode: 0644
  when: ansible_distribution == "Debian"

- name: configure logstash sysconfig file
  template:
    src: logstash_sysconfig.j2
    dest: /etc/sysconfig/logstash
    owner: root
    mode: 0664
  notify:
    - restart logstash

- name: configure logstash parser
  template:
    src: "{{item}}.j2"
    dest: "{{logstash_conf_dir}}/{{item}}"
    owner: logstash
    mode: "{{ vitam_conf_permission }}"
  with_items:
    - "01-logstash-vitam-input.conf"
    - "02-logstash-vitam-filter.conf"
    - "03-logstash-vitam-output.conf"
  notify:
    - restart logstash

- name: add json extra conf
  template:
    src: "{{item}}.j2"
    dest: "{{logstash_confextra_dir}}/{{item}}"
    owner: logstash
  with_items:
    - "elasticsearch-template.json"
  notify:
    - restart logstash

- name: add vitam patterns conf
  template:
    src: "vitam-patterns.j2"
    dest: "/opt/logstash/vendor/bundle/jruby/1.9/gems/logstash-patterns-core-2.0.5/patterns/vitam"
    owner: logstash
  notify:
    - restart logstash


#### Consul configuration ####

- name: Ensure consul config dir is OK
  file:
    path: "{{consul_folder_conf}}"
    state: directory
    owner: "{{ vitam_user }}"
    group: "{{ vitam_group }}"

- name: Deploy consul agent service declaration
  template:
    src: "service-{{ item }}.json.j2"
    dest: "{{consul_folder_conf}}/service-{{ item }}.json"
    owner: "{{ vitam_user }}"
    group: "{{ vitam_group }}"
    mode: "{{vitam_conf_permission}}"
  with_items:
    - kibana
    - logstash
  notify:
   - reload consul configuration

#### Curator ####

# Disabled when docker detected (local deployement)
# TODO: check if localhost instead of ansible_virtualization_type != docker
- name: remove PyYAML.x86_64 as incompatible with Curator
  package:
    name: PyYAML.x86_64
    state: absent
  when: ansible_virtualization_type != 'docker'

- name: install Curator package
  package:
    name: python-elasticsearch-curator
    state: latest
  when: ansible_virtualization_type != 'docker'

# TODO: Change owner to vitam:vitam ; apply on the next tasks
- name: ensure Curator directories exist
  file:
    path: "{{vitam_folder_root}}/{{item}}/curator"
    owner: root
    state: directory
    mode: 0755
  with_items:
    - data
    - log
    - conf
    - lib
  when: ansible_virtualization_type != 'docker'

- name: apply configuration files for curator
  template:
    src: "{{item}}.j2"
    dest: "{{curator_conf_dir}}/{{item}}"
    owner: logstash
  with_items:
    - "curator.yml"
    - "delete_index.yml"
    - "close_index.yml"
    - "metrics_index.yml"
  when: ansible_virtualization_type != 'docker'

- name: ensure cronie (for crontab) is installed
  package:
    name: cronie
    state: present
  when: ansible_distribution == "CentOS"

- name: ensure cron (for crontab) is installed
  package:
    name: cron
    state: present
  when: ansible_distribution == "Debian"

- name: create root crontab entry for curator for deleting old indexes
  cron:
    name: "curator delete index "
    minute: "10"
    hour: "0"
    user: "root"
    job: "/usr/bin/curator --config {{curator_conf_dir}}/curator.yml {{curator_conf_dir}}/delete_index.yml"
  when: ansible_virtualization_type != 'docker'

- name: create root crontab entry for curator for closing old indexes
  cron:
    name: "curator close index"
    minute: "05"
    hour: "0"
    user: "root"
    job: "/usr/bin/curator --config {{curator_conf_dir}}/curator.yml {{curator_conf_dir}}/close_index.yml"
  when: ansible_virtualization_type != 'docker'

- name: create root crontab entry for curator for closing old indexes on metrics
  cron:
    name: "curator close & delete old metrics index"
    minute: "09"
    hour: "0"
    user: "root"
    job: "/usr/bin/curator --config {{curator_conf_dir}}/curator.yml {{curator_conf_dir}}/metrics_index.yml"
  when: ansible_virtualization_type != 'docker'



#### Kibana dashboards configuration ####

- name: load dashboards into Elasticsearch log .kibana index
  when: "{{ (groups['hosts-log-server'] | length) > 0}}"
  run_once: true
  uri:
    url: 'http://{{elasticsearch_log_host}}:{{elasticsearch_log_http_port}}/.kibana/{{ item.split(".")[0] }}'
    method: PUT
    body: "{{ lookup('file', '{{role_path}}/files/kibana-metrics-configuration/{{item}}') }}"
    body_format: json
    status_code: 200, 201
  with_lines: find {{ search_dir }} {{ dashboard_dir }} {{ index_pattern_dir }} {{ visualization_dir }} -name '*.json' -type f | awk -F '/' '{print $(NF-1)"/"$NF}'
  vars:
    search_dir: "{{role_path}}/files/kibana-metrics-configuration/search"
    dashboard_dir: "{{role_path}}/files/kibana-metrics-configuration/dashboard"
    index_pattern_dir: "{{role_path}}/files/kibana-metrics-configuration/index-pattern"
    visualization_dir: "{{role_path}}/files/kibana-metrics-configuration/visualization"

### elasticsearch log configuration and kibana configuration ###
- name: load vitam metrics template in Elasticsearch Log
  when: "{{ (groups['hosts-log-server'] | length) > 0}}"
  run_once: true
  uri:
    url: "http://{{elasticsearch_log_host}}:{{elasticsearch_log_http_port}}/_template/metrics_template"
    method: PUT
    body: "{{ lookup('file', '{{role_path}}/files/kibana-metrics-configuration/metrics.template.json') }}"
    body_format: json
    status_code: 200,201

- name: load dashboards into Elasticsearch log .kibana index
  when: "{{ (groups['hosts-log-server'] | length) > 0}}"
  run_once: true
  uri:
    url: 'http://{{elasticsearch_log_host}}:{{elasticsearch_log_http_port}}/.kibana/{{ item.split(".")[0] }}'
    method: PUT
    body: "{{ lookup('file', '{{role_path}}/files/kibana-metrics-configuration/{{item}}') }}"
    body_format: json
    status_code: 200, 201
  with_lines: find {{ search_dir }} {{ dashboard_dir }} {{ index_pattern_dir }} {{ visualization_dir }} -name '*.json' -type f | awk -F '/' '{print $(NF-1)"/"$NF}'
  vars:
    search_dir: "{{role_path}}/files/kibana-metrics-configuration/search"
    dashboard_dir: "{{role_path}}/files/kibana-metrics-configuration/dashboard"
    index_pattern_dir: "{{role_path}}/files/kibana-metrics-configuration/index-pattern"
    visualization_dir: "{{role_path}}/files/kibana-metrics-configuration/visualization"

# TODO Get Kibana version dynamically and put it in the URL
- name: set jersey-metrics-vitam-* as kibana default index pattern
  when: "{{ (groups['hosts-log-server'] | length) > 0}}"
  run_once: true
  uri:
    url: 'http://{{elasticsearch_log_host}}:{{elasticsearch_log_http_port}}/.kibana/config/4.6.1'
    method: PUT
    body: '{"defaultIndex": "metrics-vitam-jersey-*"}'
    body_format: json
    status_code: 200, 201

- name: Ensure consul service is started
  service:
    name: "vitam-consul"
    state: started

- name: Ensure kibana service is started
  service:
    name: "kibana"
    state: started

- name: Ensure logstash service is started
  service:
    name: "logstash"
    state: started
