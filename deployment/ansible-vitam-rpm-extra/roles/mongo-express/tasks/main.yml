---
# tasks file for mongo-express
# Docker role tasks
- block:
  - name: supprimer le package docker actuel
    package:
      name: "{{item}}"
      state: absent
    with_items:
    - docker
    - python-docker
  
  - name: add GPG docker repo key
    apt_key:
      url: "https://download.docker.com/linux/debian/gpg"
      state: present
      validate_certs: no
    environment:
      https_proxy: "{{ http_proxy_environnement }}"

  - name: install apt-transport-https as Docker repository is https
    package:
      name: apt-transport-https
      state: present

  - name: check jessie-backports repo are present
    apt_repository:
      repo: "{{item}}"
      state: present
    with_items:
      - "deb [arch=amd64] https://download.docker.com/linux/debian  {{ansible_distribution_release}} stable"
  
  - name: run apt-update
    apt:
      update_cache: yes

  - name: installer le package docker
    apt:
      name: "{{item}}"
      state: present
      default_release: jessie-backports
    with_items:
        - docker-ce
        - python-docker

  when: (ansible_distribution == "Debian")

- block:
  - name: installer le package docker
    package:
      name: "{{item}}"
      state: latest
    with_items:
    - docker

  - name: installer le package docker-python
    package:
      name: docker-python

  when: (ansible_distribution == "CentOS")



# OMA : add for unity
- name: create docker group
  group:
    name: docker
    gid: 1005
    state: present

- name: Ensure docker daemon autostart && docker is started
  service:
    name: docker
    enabled: yes
    state: started

- name: Ensure .docker directory exists
  file:
    name: "/root/.docker"
    state: directory
    mode: "u=rw,g=r,o=r"

- name: Ensure HTTP connection to docker registry (CentOS)
  lineinfile:
    dest: "/etc/sysconfig/docker"
    state: present
    backrefs: yes
    regexp: "^(.*)INSECURE_REGISTRY=(.*)$"
    line: "INSECURE_REGISTRY='--insecure-registry {{docker_registry_private}} --insecure-registry {{docker_registry_proxy}} --insecure-registry {{docker_registry_group}} --insecure-registry {{docker_registry_private_long}} --insecure-registry {{docker_registry_proxy_long}} --insecure-registry {{docker_registry_group_long}}'"
  when: (ansible_distribution == "CentOS")

- name: Ensure HTTP connection to docker registry (Debian)
  lineinfile:
    dest: "/etc/default/docker"
    state: present
    backrefs: yes
    regexp: "^(.*)INSECURE_REGISTRY=(.*)$"
    line: "INSECURE_REGISTRY='--insecure-registry {{docker_registry_private}} --insecure-registry {{docker_registry_proxy}} --insecure-registry {{docker_registry_group}} --insecure-registry {{docker_registry_private_long}} --insecure-registry {{docker_registry_proxy_long}} --insecure-registry {{docker_registry_group_long}}'"
  when: (ansible_distribution == "Debian")


- name: Ensure Login priviledges to docker registry
  template:
    src: "config.json.j2"
    dest: "/root/.docker/config.json"
    owner: "{{local_username}}"
    group: "{{local_username}}"
    mode: "u=rw,g=r,o=r"
  notify:
    - restart docker

# Cf. https://docs.docker.com/engine/admin/systemd/
- name: Ensure systemd docker service drop-in folder is there
  file: name="/etc/systemd/system/docker.service.d" state=directory

- name: Make sure net.ipv4.ip_forward is enabled
  sysctl:
    name: net.ipv4.ip_forward
    sysctl_set: yes
    value: 1
  when: (ansible_distribution == "CentOS" )

#- name: configure docker http proxy
#  template: src=http_proxy.conf.j2 dest=/etc/systemd/system/docker.service.d/http_proxy.conf mode=0400
#  notify:
#  - reload systemd
#  - restart docker

# KWA : add root folders for data / conf / ... directories here ?
# KWA : configure docker login for repo docker.programmevitam.fr ?


# added because uneless now
- name: remove http proxy conf for docker
  file:
    name: /etc/systemd/system/docker.service.d/http_proxy.conf
    state: absent
  notify:
   - reload systemd
   - restart docker

#- name: create credentials for pulling
#  docker_login:
#    registry: "{{docker_registry_hostname}}"
#    username: "{{app_jenkins_remote_username}}"
#    email: "{{app_jenkins_remote_email}}"
#    password: "{{app_jenkins_remote_password}}"
# - name: verify root script directory exists
#   file:
#     path=/opt/vitam/script
#     state=directory
#     mode=0755

# - name: copy file for cron
#   copy:
#     src=purge_docker.sh
#     dest=/opt/vitam/script/purge_docker.sh
#     mode=0500

# - name: add root cron entry for daily <none> docker images removal
#   cron:
#     name="docker purge"
#     minute="50"
#     hour="6"
#     user="root"
#     job="/opt/vitam/script/purge_docker.sh"
#   tags: docker


- name: deploy docker container
  docker:
    name: "mongo-express"
    image: "{{ docker_registry_hostname }}/mongo-express:0.34.0"
    state: started
    restart_policy: always
    ports:
      - "{{vitam_docker_port_http}}:{{vitam_docker_port_internal}}"
    env:
      ME_CONFIG_MONGODB_SERVER: "{{ groups['mongos'][0] }}"
      ME_CONFIG_MONGODB_PORT: "{{ vitam_mongodb_port }}"
      ME_CONFIG_SITE_BASEURL: "/mongo-express/"
      ME_CONFIG_MONGODB_ENABLE_ADMIN: "true"
      ME_CONFIG_MONGODB_ADMINUSERNAME: "{{mongoAdminUser}}"
      ME_CONFIG_MONGODB_ADMINPASSWORD: "{{mongoAdminPassword}}"

#OMA : commented as useless in this case
#- name: put cfg file for Nagios
#  become_user: root
#  template:
#     dest: "/etc/nagios/conf.d/{{ ansible_fqdn }}_http_{{ service_name }}.cfg"
#     src: "nagios_http.cfg.j2"
#  delegate_to: vitam-prod-ldap-1.internet.agri

# OMA : ajouter le restart
#- name: Nagios restart
#  service:
#    name=nagios
#    state=restarted
# delegate_to: vitam-prod-ldap-1.internet.agri
