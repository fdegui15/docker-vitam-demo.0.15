<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="c8480034-0dce-4dac-a1f2-c088e879b614" activeEnvironment="Default" name="TestSIP" resourceRoot="" soapui-version="5.2.1" abortOnError="false" runType="SEQUENTIAL" defaultScriptLanguage="Groovy" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.TestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="TestSuite ingest US 655/946"/>
  <con:entry key="Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="user-settings.xml Password" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="false"/>
  <con:entry key="Export JUnit Results with test properties" value="false"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Export All" value="false"/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="Loop SIP"/>
  <con:entry key="Print Report" value="false"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value=""/>
  <con:entry key="Select Report Type" value=""/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
</xml-fragment>]]></con:setting></con:settings><con:testSuite id="3738c27b-9369-49bf-82cf-ca1f835e1d56" name="TestSuite"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase id="3f83a299-20d7-4e96-bee8-f15112f5a389" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SIPTEST" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="init" id="7772c6d0-3604-44b8-9d9b-b683c04d9c3f"><con:settings/><con:config><script>/*******************************************************************************
 * Copyright French Prime minister Office/SGMAP/DINSIC/Vitam Program (2015-2019)
 *
 * contact.vitam@culture.gouv.fr
 *
 * This software is a computer program whose purpose is to implement a digital archiving back-office system managing
 * high volumetry securely and efficiently.
 *
 * This software is governed by the CeCILL 2.1 license under French law and abiding by the rules of distribution of free
 * software. You can use, modify and/ or redistribute the software under the terms of the CeCILL 2.1 license as
 * circulated by CEA, CNRS and INRIA at the following URL "http://www.cecill.info".
 *
 * As a counterpart to the access to the source code and rights to copy, modify and redistribute granted by the license,
 * users are provided only with a limited warranty and the software's author, the holder of the economic rights, and the
 * successive licensors have only limited liability.
 *
 * In this respect, the user's attention is drawn to the risks associated with loading, using, modifying and/or
 * developing or reproducing the software by the user in light of its specific status of free software, that may mean
 * that it is complicated to manipulate, and that also therefore means that it is reserved for developers and
 * experienced professionals having in-depth computer knowledge. Users are therefore encouraged to load and test the
 * software's suitability as regards their requirements in conditions enabling the security of their systems and/or data
 * to be ensured and, more generally, to use and operate it in the same conditions as regards security.
 *
 * The fact that you are presently reading this means that you have had knowledge of the CeCILL 2.1 license and that you
 * accept its terms.
 *******************************************************************************/

// defition du json 
def inputJSON = context.inputJSON 
log.info '#### Debut  du test ####' 
// iterator 

def i = context.iteration 

if ( context.inputJSON!= null &amp;&amp;   context.inputJSON.params.size  > 0 ){
	context.testName		= inputJSON.params[i].testName
	context.sipName		= inputJSON.params[i].sipName
	context.category		= inputJSON.params[i].category
	context.httpStatusCode 	= inputJSON.params[i].httpStatusCode
	context.result 		= true 
	context.expected 		= inputJSON.params[i].expected

} 

</script></con:config></con:testStep><con:testStep type="groovy" name="upload-http-builder" id="c54e8486-2efa-41d1-b080-bf72baaed437"><con:settings/><con:config><script>/*******************************************************************************
 * Copyright French Prime minister Office/SGMAP/DINSIC/Vitam Program (2015-2019)
 *
 * contact.vitam@culture.gouv.fr
 *
 * This software is a computer program whose purpose is to implement a digital archiving back-office system managing
 * high volumetry securely and efficiently.
 *
 * This software is governed by the CeCILL 2.1 license under French law and abiding by the rules of distribution of free
 * software. You can use, modify and/ or redistribute the software under the terms of the CeCILL 2.1 license as
 * circulated by CEA, CNRS and INRIA at the following URL "http://www.cecill.info".
 *
 * As a counterpart to the access to the source code and rights to copy, modify and redistribute granted by the license,
 * users are provided only with a limited warranty and the software's author, the holder of the economic rights, and the
 * successive licensors have only limited liability.
 *
 * In this respect, the user's attention is drawn to the risks associated with loading, using, modifying and/or
 * developing or reproducing the software by the user in light of its specific status of free software, that may mean
 * that it is complicated to manipulate, and that also therefore means that it is reserved for developers and
 * experienced professionals having in-depth computer knowledge. Users are therefore encouraged to load and test the
 * software's suitability as regards their requirements in conditions enabling the security of their systems and/or data
 * to be ensured and, more generally, to use and operate it in the same conditions as regards security.
 *
 * The fact that you are presently reading this means that you have had knowledge of the CeCILL 2.1 license and that you
 * accept its terms.
 *******************************************************************************/
/**
 * Upload File 
 **/
import java.security.KeyStore
import org.apache.http.conn.scheme.Scheme
import org.apache.http.conn.ssl.SSLSocketFactory
import org.apache.http.conn.ssl.AllowAllHostnameVerifier
import java.io.File;
import java.io.FileInputStream;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.entity.InputStreamEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.util.EntityUtils;
import groovy.json.JsonSlurper
def i = context.iteration
def url  = context.ingest+"ingest-external/v1/ingests/"

def cert = context.certfile
def certPass = context.certPass

def trust = context.truststore
def trustPass = context.trustPass

def file = null //context.dataDir+context.sipName

if (context.sipName != null) {
	file = context.dataDir + context.sipName
} else if (context.inputJSON.params[i].ruleName != null) {
	file = context.dataDir + context.inputJSON.params[i].ruleName;
	url = context.access + "admin-external/v1/rules";
} else if (context.inputJSON.params[i].formatName != null) {
	file = context.dataDir + context.inputJSON.params[i].formatName;
	url = context.access + "admin-external/v1/formats";
}

/*
if (context.inputJSON.params[i].category != "EVT_UPLOAD_SIP")
{
	file = context.dataDir + context.inputJSON.params[i].operations.ruleFileName;
	url  = context.access + context.inputJSON.params[i].operations.endpoint;
}*/

log.info 'Url for operation' + url

log.info 'Cert: ' + cert
log.info 'File uploaded: ' + context.dataDir+context.sipName

def ope_id = null

def http = new DefaultHttpClient();
if (url.startsWith('https')) {
	def keyStore = KeyStore.getInstance( "PKCS12" )
	def trustStore = KeyStore.getInstance("JKS")
	//def keyStore = KeyStore.getInstance( "TLS" )
	
	new File(cert).withInputStream  {
    		keyStore.load(it, certPass.toCharArray() )
	}
	new File(trust).withInputStream {
		trustStore.load(it, trustPass.toCharArray())
	}
	SSLSocketFactory socketFactory = new SSLSocketFactory(keyStore,certPass , trustStore )
	//socketFactory.setHostnameVerified( new AllowAllHostnameVerifier() )
	socketFactory.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
	http.connectionManager.schemeRegistry.register( new Scheme("https", socketFactory, 443 ) )
}

def reponse = null;

HttpPost httppost = new HttpPost(url);
def reqEntity = new InputStreamEntity(new FileInputStream(file), -1);
reqEntity.setContentType("application/octet-stream");
reqEntity.setChunked(true);	

if (context.inputJSON.params[i].tenant != null){
	if (!context.inputJSON.params[i].tenant.equals("empty")){
		httppost.addHeader("X-Tenant-Id", context.inputJSON.params[i].tenant);
		httppost.addHeader("X-Action", "RESUME");
		httppost.addHeader("X-Context-Id", "DEFAULT_WORKFLOW");
	}
} else {
	httppost.addHeader("X-Tenant-Id", "0");
	httppost.addHeader("X-Action", "RESUME");
	httppost.addHeader("X-Context-Id", "DEFAULT_WORKFLOW");
}
	
httppost.setEntity(reqEntity);
log.info "executing request " + httppost.getRequestLine(); 	
response = http.execute(httppost);

if (response.getStatusLine().getStatusCode() == 401 ||
		response.getStatusLine().getStatusCode() == 412){
	context.ope_id = null;
	context.outputJson.params[context.outIteration] = new JsonSlurper().parseText('{}')
		if (context.inputJSON.params[i].sipName != null) {
			context.outputJson.params[context.outIteration].fileName = context.inputJSON.params[i].sipName
		} else if (context.inputJSON.params[i].ruleName != null) {
			context.outputJson.params[context.outIteration].fileName = context.inputJSON.params[i].ruleName;
		} else if (context.inputJSON.params[i].formatName != null) {
			context.outputJson.params[context.outIteration].fileName = context.inputJSON.params[i].formatName;
		}
		
		context.outputJson.params[context.outIteration].testName = context.inputJSON.params[i].testName
		context.outputJson.params[context.outIteration].category = context.inputJSON.params[i].category
		boolean tf = context.inputJSON.params[i].httpStatusCode == response.getStatusLine().getStatusCode();
		if (tf){
			if (context.inputJSON.params[i].httpStatusCode == 401) {
				context.outputJson.params[context.outIteration].expected = "UNAUTHORIZED"
				context.outputJson.params[context.outIteration].observed = "UNAUTHORIZED"
			} else if (context.inputJSON.params[i].httpStatusCode == 412) {
				context.outputJson.params[context.outIteration].expected = "PRECONDITION_FAILED"
				context.outputJson.params[context.outIteration].observed = "PRECONDITION_FAILED"
			}
		} else {
			if (context.inputJSON.params[i].httpStatusCode == 401){
				context.outputJson.params[context.outIteration].expected = "UNAUTHORIZED"
				context.outputJson.params[context.outIteration].observed = "KO"	
			}
			else if (context.inputJSON.params[i].httpStatusCode == 412){
				context.outputJson.params[context.outIteration].expected = "PRECONDITION_FAILED"
				context.outputJson.params[context.outIteration].observed = "KO"	
			}
		}
		context.outputJson.params[context.outIteration].result = tf
		context.outIteration = context.outIteration + 1
} else if (response.getFirstHeader('X-REQUEST-ID') != null){
	context.ope_id =response.getFirstHeader('X-REQUEST-ID').getValue();
}

</script></con:config></con:testStep><con:testStep type="groovy" name="waitATR" id="56431484-8a03-4a5c-857f-7a54fbc295b4"><con:settings/><con:config><script>import java.security.KeyStore
import org.apache.http.conn.scheme.Scheme
import org.apache.http.conn.ssl.SSLSocketFactory
import org.apache.http.conn.ssl.AllowAllHostnameVerifier
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.entity.InputStreamEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.util.EntityUtils;
import groovy.json.JsonSlurper
import org.apache.http.client.methods.HttpHead;

import org.apache.http.impl.client.DefaultHttpClient;
def url = context.ingest+"ingest-external/v1/operations/"
def cert = context.certfile
def certPass = context.certPass

def trust = context.truststore
def trustPass = context.trustPass

def file = null //context.dataDir+context.sipName

def TIME_TO_SLEEP = 600; 

if(context.ope_id != null){
	log.info '----check status '+context.ope_id
	def http = new DefaultHttpClient();
	if (url.startsWith('https')) {
		def keyStore = KeyStore.getInstance( "PKCS12" )
		def trustStore = KeyStore.getInstance("JKS")
		//def keyStore = KeyStore.getInstance( "TLS" )
		
		new File(cert).withInputStream  {
	    		keyStore.load(it, certPass.toCharArray() )
		}
		new File(trust).withInputStream {
			trustStore.load(it, trustPass.toCharArray())
		}
		SSLSocketFactory socketFactory = new SSLSocketFactory(keyStore,certPass , trustStore )
		//socketFactory.setHostnameVerified( new AllowAllHostnameVerifier() )
		socketFactory.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
		http.connectionManager.schemeRegistry.register( new Scheme("https", socketFactory, 443 ) )
	}
	
		//HttpHead httpHead = new HttpHead(url+context.ope_id);
		HttpHead httpHead = new HttpHead(url+context.ope_id);
		def headeReponse  = http.execute(httpHead);
		def responseStatus  = 202 ;
		
		int statusReponse = headeReponse.getStatusLine().getStatusCode() ; 
		//headeReponse.getStatusLine().getStatusCode() ; 
	     try {
	                    Thread.sleep(TIME_TO_SLEEP);
	                } catch (InterruptedException ex) {
	                    LOGGER.error(ex);
	                    Thread.currentThread().interrupt();
	                      statusReponse = 500; 
	                }
		while (statusReponse == 202  ) {
		
			      try {
	                    Thread.sleep(TIME_TO_SLEEP);
	                } catch (InterruptedException ex) {
	                    LOGGER.error(ex);
	                    Thread.currentThread().interrupt();
	                      statusReponse = 500; 
	                }
				/// try again
	                try {
	         
	                 responseStatus  = http.execute(httpHead).getStatusLine().getStatusCode() ;
	                } catch (Exception e) {                
	                    statusReponse = 500
	                }
	        }
}</script></con:config></con:testStep><con:testStep type="groovy" name="details" id="b6877300-39ac-40de-a7d4-17e228892c0a"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import java.security.KeyStore

import groovy.json.JsonSlurper
import org.apache.http.conn.scheme.Scheme
import org.apache.http.conn.ssl.SSLSocketFactory
import org.apache.http.conn.ssl.AllowAllHostnameVerifier
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpPut;
import java.io.File;
import java.io.FileInputStream;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.InputStreamEntity;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.util.EntityUtils;
def i = context.iteration
def url  = context.access+"access-external/v1/operations/"+context.ope_id

def options = "" 
def cert = context.certfile
def certPass = context.certPass
def trust = context.truststore
def trustPass = context.trustPass
def reponse =  null

def http = new DefaultHttpClient();
if (url.startsWith('https')) {
	def keyStore = KeyStore.getInstance( "PKCS12" )
	def trustStore = KeyStore.getInstance("JKS")
	//def keyStore = KeyStore.getInstance( "TLS" )
	
	new File(cert).withInputStream  {
    		keyStore.load(it, certPass.toCharArray() )
	}
	new File(trust).withInputStream {
		trustStore.load(it, trustPass.toCharArray())
	}
	SSLSocketFactory socketFactory = new SSLSocketFactory(keyStore,certPass , trustStore )
	//socketFactory.setHostnameVerified( new AllowAllHostnameVerifier() )
	socketFactory.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
	http.connectionManager.schemeRegistry.register( new Scheme("https", socketFactory, 443 ) )
}

def response = null;

if (context.category == "Test API external"){
	def actionsSize = context.inputJSON.params[i].actions.size;
	def actionResult = [];
	boolean tf = false;
	for (n = 0; n < actionsSize; n++) {
		url  = context.access + context.inputJSON.params[i].actions[n].endpoint;	
		if (context.inputJSON.params[i].actions[n].method == "PUT"){
			log.info context.unitId;
			url = url + "/" + context.unitId;
 			HttpPut httpput = new HttpPut(url);
 			StringEntity reqEntity = new StringEntity(context.inputJSON.params[i].actions[n].request, "UTF-8");
 			reqEntity.setContentType("application/json");

			httpput.setHeader("Accept-Encoding", "UTF-8");

			if (context.inputJSON.params[i].actions[n].tenant != null){
 				httpput.addHeader("X-Tenant-Id", context.inputJSON.params[i].actions[n].tenant);
 			}
 		
 			httpput.setEntity(reqEntity);
 			response = http.execute(httpput);

	 		context.response = response;

	 		log.info "************************************" + response.getStatusLine().getStatusCode();
 		
 		} else if (context.inputJSON.params[i].actions[n].method == "POST"){
 			HttpPost httppost = new HttpPost(url); 
 			StringEntity reqEntity = new StringEntity(context.inputJSON.params[i].actions[n].request, "UTF-8") ;
 		
 			reqEntity.setContentType("application/json");
 		
			httppost.setHeader("Accept-Encoding", "UTF-8");
 			httppost.addHeader("X-Http-Method-Override", "GET");

 			if (context.inputJSON.params[i].actions[n].tenant != null){
 				httppost.addHeader("X-Tenant-Id", context.inputJSON.params[i].actions[n].tenant);
 			}

 			httppost.setEntity(reqEntity);
 			response = http.execute(httppost);

			context.testName = context.inputJSON.params[i].testName;
			context.response = response;

			log.info "************************************" + response.getStatusLine().getStatusCode();
 		}
 		tf = resultControl(response, context.inputJSON.params[i].actions[n].expected);
 		log.info tf
 		
 		context.outputJson.params[context.outIteration] = new JsonSlurper().parseText('{}')
		if (context.inputJSON.params[i].sipName != null) {
			context.outputJson.params[context.outIteration].fileName = context.inputJSON.params[i].sipName
		} else if (context.inputJSON.params[i].ruleName != null) {
			context.outputJson.params[context.outIteration].fileName = context.inputJSON.params[i].ruleName;
		} else if (context.inputJSON.params[i].formatName != null) {
			context.outputJson.params[context.outIteration].fileName = context.inputJSON.params[i].formatName;
		}
		context.outputJson.params[context.outIteration].currentAction = context.inputJSON.params[i].actions[n].name
		
		context.outputJson.params[context.outIteration].testName = context.inputJSON.params[i].testName
		context.outputJson.params[context.outIteration].category = context.inputJSON.params[i].category

		if (tf){
			if (context.inputJSON.params[i].actions[n].expected[0].httpStatusCode == 200){
				context.outputJson.params[context.outIteration].expected = "OK"
				context.outputJson.params[context.outIteration].observed = "OK"	
			} else if (context.inputJSON.params[i].actions[n].expected[0].httpStatusCode == 401) {
				context.outputJson.params[context.outIteration].expected = "UNAUTHORIZED"
				context.outputJson.params[context.outIteration].observed = "UNAUTHORIZED"
			} else if (context.inputJSON.params[i].actions[n].expected[0].httpStatusCode == 412) {
				context.outputJson.params[context.outIteration].expected = "PRECONDITION_FAILED"
				context.outputJson.params[context.outIteration].observed = "PRECONDITION_FAILED"
			}
			else {
				context.outputJson.params[context.outIteration].expected = "KO"
				context.outputJson.params[context.outIteration].observed = "KO"
			}
		} else {
			if (context.inputJSON.params[i].actions[n].expected[0].httpStatusCode == 200){
				context.outputJson.params[context.outIteration].expected = "OK"
				context.outputJson.params[context.outIteration].observed = "KO"	
			} 
			else if (context.inputJSON.params[i].actions[n].expected[0].httpStatusCode == 401){
				context.outputJson.params[context.outIteration].expected = "UNAUTHORIZED"
				context.outputJson.params[context.outIteration].observed = "KO"	
			}
			else if (context.inputJSON.params[i].actions[n].expected[0].httpStatusCode == 412){
				context.outputJson.params[context.outIteration].expected = "PRECONDITION_FAILED"
				context.outputJson.params[context.outIteration].observed = "KO"	
			}
			else {
				context.outputJson.params[context.outIteration].expected = "KO"
				context.outputJson.params[context.outIteration].observed = "OK"
			}
		}
		context.outputJson.params[context.outIteration].result = tf
		context.outIteration = context.outIteration + 1	
	}	
} else if (context.ope_id != null) {
	HttpPost httppost = new HttpPost(url); 
 	StringEntity reqEntity = new StringEntity('{}') ;
 		
 	reqEntity.setContentType("application/json");
 		
	httppost.setHeader("Accept-Encoding", "UTF-8");
 	httppost.addHeader("X-Http-Method-Override", "GET");

 	if (context.inputJSON.params[i].tenant != null){
		httppost.addHeader("X-Tenant-Id", context.inputJSON.params[i].tenant);
	} else {
		httppost.addHeader("X-Tenant-Id", "0");
	}

 	httppost.setEntity(reqEntity);
 	response = http.execute(httppost);

	if (response !=null )
	{	
		def result  = new JsonSlurper().parseText(EntityUtils.toString(response.entity))  // $.result[*]
		log.error result 
		//result = reponse
		def size = result.$results[0].events.size

		log.info 'Size / Last elem: ' + size + ' / ' + size-1
		log.info 'Item -1: ' + result.$results[0].events[size-1].evType
		log.info 'Outcome: ' + result.$results[0].events[size-1].outcome

		// Operation result
		resultat =  result.$results[0].events[size-1].outcome == context.expected

		if (context.inputJSON.params[i].actions != null) {

			// boucler sur les actions
			def actionsSize = context.inputJSON.params[i].actions.size
			for (a = 0; a < actionsSize; a++) {
				log.info "*****************************************" + a
				currentAction = context.inputJSON.params[i].actions[a].name
				context.outputJson.params[context.outIteration] = new JsonSlurper().parseText('{}')
				context.outputJson.params[context.outIteration].ope_id = context.ope_id
				context.outputJson.params[context.outIteration].currentAction = currentAction

				// Copy parameters
				context.outputJson.params[context.outIteration].fileName = context.inputJSON.params[i].sipName
				context.outputJson.params[context.outIteration].expected = context.inputJSON.params[i].expected
				context.outputJson.params[context.outIteration].httpStatusCode = context.inputJSON.params[i].httpStatusCode
				context.outputJson.params[context.outIteration].testName = context.inputJSON.params[i].testName
				context.outputJson.params[context.outIteration].category = context.inputJSON.params[i].category
				for (j = 0; j < size; j++) {
					currentEventType = result.$results[0].events[j].evType
					currentEventOutCome = result.$results[0].events[j].outcome
					if (currentAction == currentEventType && currentEventOutCome != 'STARTED') {
						log.info 'outIteration : ' + context.outIteration
						context.outputJson.params[context.outIteration].expected = context.inputJSON.params[i].actions[a].expected
						context.outputJson.params[context.outIteration].observed = result.$results[0].events[j].outcome
						context.outputJson.params[context.outIteration].result = context.outputJson.params[context.outIteration].expected == context.outputJson.params[context.outIteration].observed
						break;
					}
				}
				log.info 'outputJson : ' + context.outputJson
				context.outIteration = context.outIteration + 1
			}
		}
		else {
			//maintain compatibility
			context.outputJson.params[context.outIteration] = new JsonSlurper().parseText('{}')

			// Copy parameters
			context.outputJson.params[context.outIteration].fileName = context.inputJSON.params[i].sipName
			context.outputJson.params[context.outIteration].expected = context.inputJSON.params[i].expected
			context.outputJson.params[context.outIteration].httpStatusCode = context.inputJSON.params[i].httpStatusCode
			context.outputJson.params[context.outIteration].testName = context.inputJSON.params[i].testName
			context.outputJson.params[context.outIteration].category = context.inputJSON.params[i].category
			context.outputJson.params[context.outIteration].ope_id = context.ope_id
			context.outputJson.params[context.outIteration].expected = context.expected
			context.outputJson.params[context.outIteration].observed = result.$results[0].events[size-1].outcome
			context.outputJson.params[context.outIteration].result = resultat
			context.outIteration = context.outIteration + 1
		}
		log.info 'OUTPUT JSON : '+context.outputJson.params.text
		log.info "------------------------------------->resultat observé : "+ result.$results[0].events[size-1].outcome
	}
}


boolean resultControl(def response, def expected){
	def result;
	boolean res = false;
	try {
		result  = new JsonSlurper().parseText(EntityUtils.toString(response.entity, "UTF-8"))
	} catch (IllegalArgumentException e){
		log.error 'Entity is empty : '
	}	
	
	if (response.getStatusLine().getStatusCode() == 200 ){
		if (result.$results[0] != null){
			context.unitId = result.$results[0]["#id"];	
		}	 
	}

	for (a = 0; a < expected.size; a++){
		if (expected[a].keySet()[0] == "httpStatusCode") {
			log.info response.getStatusLine().getStatusCode()
			log.info expected[a][expected[a].keySet()[0]]			
			res = response.getStatusLine().getStatusCode() == expected[a][expected[a].keySet()[0]]
			if (res == false) return false;
		}
		else if (expected[a].keySet()[0] == "total"){
			log.info result.$hits.total
			log.info expected[a][expected[a].keySet()[0]]
			res = result.$hits.total == expected[a][expected[a].keySet()[0]]
			if (res == false) return false;
		} else if (expected[a].keySet()[0] == "set"){
			for (b=0; b < expected[a][expected[a].keySet()[0]].size; b++){
				def key = expected[a][expected[a].keySet()[0]][b].keySet()[0]

				log.info expected[a][expected[a].keySet()[0]][b][key]
				log.info result.$context.$action[0].$set[key]
				res = result.$context.$action[0].$set[key] == expected[a][expected[a].keySet()[0]][b][key]
			}
		}
		else {
			for (b=0; b < expected[a][expected[a].keySet()[0]].size; b++){
				log.info expected[a].keySet()[0]
				
				log.info result.$results[b][expected[a].keySet()[0]]
				log.info expected[a][expected[a].keySet()[0]][b]
				res = result.$results[b][expected[a].keySet()[0]] == new String(expected[a][expected[a].keySet()[0]][b].getBytes("UTF-8"), "UTF-8")
				if (res == false) return false;
			}
		}
	}
	return res;
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="while" id="80a3a8e4-bc73-41e7-a411-48982e666a01"><con:settings/><con:config><script>

def inputJSON = context.inputJSON 
def i = context.iteration 

if ( context.inputJSON!= null &amp;&amp; i &lt; inputJSON.params.size -1 ) {
	context.iteration = (i +  1 )
	testRunner.gotoStep(0)
}
else {
	
}
log.info '### Fin du test'
</script></con:config></con:testStep><con:testStep type="groovy" name="report" id="666d2252-2a14-4ffc-95bb-817708297ebd"><con:settings/><con:config><script>
import groovy.json.JsonOutput
def  inputJSON = context.outputJson 
	log.info '#### GENERATION DU RAPPORT'
	log.info ' json'+context.outputJson
	log.info ' Nombre de tests '+context.outputJson.params.size
	
if ( context.outputJson!= null &amp;&amp; 0 &lt; context.outputJson.params.size  ) {
	def jsonOut = context.expand('${#Project#reportingDir}') + 'reporting.json'
	log.info jsonOut
	File jsonFile = new File(jsonOut)
	jsonFile.text= JsonOutput.toJson(context.outputJson)
	log.info 'Fin de tests'
}</script></con:config></con:testStep><con:setupScript>def configD =context.expand('${#Project#configDir}')
log.info ("\ncongig  directory :" + configD)
import groovy.json.JsonSlurper
def i = 0 ; 
def inputFile = new File(configD+"data.json")
def inputJSON = new JsonSlurper().parseText(inputFile.text)
def outputJson  = new JsonSlurper().parseText('{"params":[]}')

//define contexts

context.dataDir = context.expand('${#Project#dataDir}')
context.ingest = context.expand('${#Project#ingestHost}')
context.access = context.expand('${#Project#accessHost}')
context.certfile = context.expand('${#Project#certfile}')
context.certPass = context.expand('${#Project#certPass}')

context.truststore = context.expand('${#Project#truststore}')
context.trustPass = context.expand('${#Project#trustPass}')

context.inputJSON = inputJSON
context.outputJson = outputJson 
context.inputFile =inputFile
context.iteration  = 0 ; 
context.outIteration  = 0 ; 
context.nbFail = 0 
context.nbsuccess= 0 

def items = []
context.items = items</con:setupScript>
<con:tearDownScript>//context.inputFile.close()</con:tearDownScript><con:properties/></con:testCase><con:properties/></con:testSuite>
<con:endpointStrategy xsi:type="con:DefaultEndpointStrategy" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:endpoint mode="COMPLEMENT" username="ykouki" password="">https://int.env.programmevitam.fr</con:endpoint></con:endpointStrategy>
<con:properties><con:property><con:name>ingestHost</con:name><con:value>https://143.126.93.154:8443/</con:value></con:property><con:property><con:name>logbookHost</con:name><con:value>https://143.126.93.154:9002/</con:value></con:property><con:property><con:name>accessHost</con:name><con:value>https://143.126.93.154:8444/</con:value></con:property><con:property><con:name>certfile</con:name><con:value>/vitam/conf/ihm-recette/keystore_ihm-recette.p12</con:value></con:property><con:property><con:name>certPass</con:name><con:value>azerty5</con:value></con:property><con:property><con:name>truststore</con:name><con:value>/vitam/conf/ihm-recette/truststore_ihm-recette.jks</con:value></con:property><con:property><con:name>trustPass</con:name><con:value>azerty10</con:value></con:property><con:property><con:name>dataDir</con:name><con:value>/vitam/conf/soapui/data/</con:value></con:property><con:property><con:name>reportingDir</con:name><con:value>/vitam/conf/soapui/report/</con:value></con:property><con:property><con:name>configDir</con:name><con:value>/vitam/conf/soapui/config/</con:value></con:property><con:property><con:name>rulesCreatePath</con:name><con:value>/admin-external/v1/rules</con:value></con:property><con:property><con:name>tenant</con:name><con:value>0</con:value></con:property><con:property><con:name>fileRule</con:name><con:value>/vitam/conf/soapui/data/rules/regles_CSV.csv</con:value></con:property></con:properties><con:wssContainer>
<con:crypto>
	<con:source>/vitam/conf/tsa.p12</con:source>
	<con:password>vitam1234</con:password>
	<con:type>KEYSTORE</con:type>
</con:crypto>
<con:outgoing>
	<con:name>vitam</con:name>
	<con:username/>
	<con:password/>
	<con:entry type="Encryption" username="ihm_demo_int3" password="vitam1234">
		<con:configuration>
			<crypto>keystore_ihm-demo.p12</crypto>
			<keyIdentifierType>3</keyIdentifierType>
			<symmetricEncAlgorithm/>
			<encKeyTransport/>
			<embeddedKeyName/>
			<embeddedKeyPassword/>
			<encryptionCanonicalization/>
			<encryptSymmetricKey>true</encryptSymmetricKey>
		</con:configuration>
	</con:entry>
</con:outgoing>
</con:wssContainer>
<con:oAuth2ProfileContainer/>
<con:oAuth1ProfileContainer/><con:sensitiveInformation>
<ProjectSpecificExposureList>null###null</ProjectSpecificExposureList>
</con:sensitiveInformation>
</con:soapui-project>